//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("Model", "AIRPLANE_AIRPLANEMODEL", "AIRPLANEMODEL", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Connection.AIRPLANEMODEL), "AIRPLANE", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Connection.AIRPLANE), true)]
[assembly: EdmRelationshipAttribute("Model", "AIRPLANE_CARRIER", "CARRIER", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Connection.CARRIER), "AIRPLANE", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Connection.AIRPLANE), true)]
[assembly: EdmRelationshipAttribute("Model", "FLY_AIRPLANE", "AIRPLANE", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Connection.AIRPLANE), "FLY", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Connection.FLY), true)]
[assembly: EdmRelationshipAttribute("Model", "AIRPLANEMODEL_PRODUCER", "PRODUCER", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Connection.PRODUCER), "AIRPLANEMODEL", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Connection.AIRPLANEMODEL), true)]
[assembly: EdmRelationshipAttribute("Model", "CONNECTION_AIRPLANEMODEL", "AIRPLANEMODEL", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Connection.AIRPLANEMODEL), "CONNECTION", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Connection.CONNECTION), true)]
[assembly: EdmRelationshipAttribute("Model", "AIRPORT_CITY", "CITY", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Connection.CITY), "AIRPORT", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Connection.AIRPORT), true)]
[assembly: EdmRelationshipAttribute("Model", "CONNECTION_AIRPORT_FROM", "AIRPORT", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Connection.AIRPORT), "CONNECTION", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Connection.CONNECTION), true)]
[assembly: EdmRelationshipAttribute("Model", "CONNECTION_AIRPORT_TO", "AIRPORT", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Connection.AIRPORT), "CONNECTION", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Connection.CONNECTION), true)]
[assembly: EdmRelationshipAttribute("Model", "CONNECTION_CARRIER", "CARRIER", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Connection.CARRIER), "CONNECTION", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Connection.CONNECTION), true)]
[assembly: EdmRelationshipAttribute("Model", "CITY_COUNTRY", "COUNTRY", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Connection.COUNTRY), "CITY", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Connection.CITY), true)]
[assembly: EdmRelationshipAttribute("Model", "FLY_CONNECTION", "CONNECTION", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Connection.CONNECTION), "FLY", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Connection.FLY), true)]
[assembly: EdmRelationshipAttribute("Model", "RESERVATION_FLY", "FLY", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Connection.FLY), "RESERVATION", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Connection.RESERVATION), true)]

#endregion

namespace Connection
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class DBConnection : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new DBConnection object using the connection string found in the 'DBConnection' section of the application configuration file.
        /// </summary>
        public DBConnection() : base("name=DBConnection", "DBConnection")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new DBConnection object.
        /// </summary>
        public DBConnection(string connectionString) : base(connectionString, "DBConnection")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new DBConnection object.
        /// </summary>
        public DBConnection(EntityConnection connection) : base(connection, "DBConnection")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<AIRPLANE> AIRPLANE
        {
            get
            {
                if ((_AIRPLANE == null))
                {
                    _AIRPLANE = base.CreateObjectSet<AIRPLANE>("AIRPLANE");
                }
                return _AIRPLANE;
            }
        }
        private ObjectSet<AIRPLANE> _AIRPLANE;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<AIRPLANEMODEL> AIRPLANEMODEL
        {
            get
            {
                if ((_AIRPLANEMODEL == null))
                {
                    _AIRPLANEMODEL = base.CreateObjectSet<AIRPLANEMODEL>("AIRPLANEMODEL");
                }
                return _AIRPLANEMODEL;
            }
        }
        private ObjectSet<AIRPLANEMODEL> _AIRPLANEMODEL;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<AIRPORT> AIRPORT
        {
            get
            {
                if ((_AIRPORT == null))
                {
                    _AIRPORT = base.CreateObjectSet<AIRPORT>("AIRPORT");
                }
                return _AIRPORT;
            }
        }
        private ObjectSet<AIRPORT> _AIRPORT;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CARRIER> CARRIER
        {
            get
            {
                if ((_CARRIER == null))
                {
                    _CARRIER = base.CreateObjectSet<CARRIER>("CARRIER");
                }
                return _CARRIER;
            }
        }
        private ObjectSet<CARRIER> _CARRIER;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CITY> CITY
        {
            get
            {
                if ((_CITY == null))
                {
                    _CITY = base.CreateObjectSet<CITY>("CITY");
                }
                return _CITY;
            }
        }
        private ObjectSet<CITY> _CITY;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CONNECTION> CONNECTION
        {
            get
            {
                if ((_CONNECTION == null))
                {
                    _CONNECTION = base.CreateObjectSet<CONNECTION>("CONNECTION");
                }
                return _CONNECTION;
            }
        }
        private ObjectSet<CONNECTION> _CONNECTION;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<COUNTRY> COUNTRY
        {
            get
            {
                if ((_COUNTRY == null))
                {
                    _COUNTRY = base.CreateObjectSet<COUNTRY>("COUNTRY");
                }
                return _COUNTRY;
            }
        }
        private ObjectSet<COUNTRY> _COUNTRY;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<FLY> FLY
        {
            get
            {
                if ((_FLY == null))
                {
                    _FLY = base.CreateObjectSet<FLY>("FLY");
                }
                return _FLY;
            }
        }
        private ObjectSet<FLY> _FLY;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<PRODUCER> PRODUCER
        {
            get
            {
                if ((_PRODUCER == null))
                {
                    _PRODUCER = base.CreateObjectSet<PRODUCER>("PRODUCER");
                }
                return _PRODUCER;
            }
        }
        private ObjectSet<PRODUCER> _PRODUCER;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RESERVATION> RESERVATION
        {
            get
            {
                if ((_RESERVATION == null))
                {
                    _RESERVATION = base.CreateObjectSet<RESERVATION>("RESERVATION");
                }
                return _RESERVATION;
            }
        }
        private ObjectSet<RESERVATION> _RESERVATION;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the AIRPLANE EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAIRPLANE(AIRPLANE aIRPLANE)
        {
            base.AddObject("AIRPLANE", aIRPLANE);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the AIRPLANEMODEL EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAIRPLANEMODEL(AIRPLANEMODEL aIRPLANEMODEL)
        {
            base.AddObject("AIRPLANEMODEL", aIRPLANEMODEL);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the AIRPORT EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAIRPORT(AIRPORT aIRPORT)
        {
            base.AddObject("AIRPORT", aIRPORT);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CARRIER EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCARRIER(CARRIER cARRIER)
        {
            base.AddObject("CARRIER", cARRIER);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CITY EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCITY(CITY cITY)
        {
            base.AddObject("CITY", cITY);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CONNECTION EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCONNECTION(CONNECTION cONNECTION)
        {
            base.AddObject("CONNECTION", cONNECTION);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the COUNTRY EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCOUNTRY(COUNTRY cOUNTRY)
        {
            base.AddObject("COUNTRY", cOUNTRY);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the FLY EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFLY(FLY fLY)
        {
            base.AddObject("FLY", fLY);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the PRODUCER EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPRODUCER(PRODUCER pRODUCER)
        {
            base.AddObject("PRODUCER", pRODUCER);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RESERVATION EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRESERVATION(RESERVATION rESERVATION)
        {
            base.AddObject("RESERVATION", rESERVATION);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="AIRPLANE")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class AIRPLANE : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new AIRPLANE object.
        /// </summary>
        /// <param name="sYMBOL">Initial value of the SYMBOL property.</param>
        /// <param name="pRODUCTIONDATE">Initial value of the PRODUCTIONDATE property.</param>
        /// <param name="mODELNAME">Initial value of the MODELNAME property.</param>
        /// <param name="cARRIERSYMBOL">Initial value of the CARRIERSYMBOL property.</param>
        public static AIRPLANE CreateAIRPLANE(global::System.String sYMBOL, global::System.DateTime pRODUCTIONDATE, global::System.String mODELNAME, global::System.String cARRIERSYMBOL)
        {
            AIRPLANE aIRPLANE = new AIRPLANE();
            aIRPLANE.SYMBOL = sYMBOL;
            aIRPLANE.PRODUCTIONDATE = pRODUCTIONDATE;
            aIRPLANE.MODELNAME = mODELNAME;
            aIRPLANE.CARRIERSYMBOL = cARRIERSYMBOL;
            return aIRPLANE;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SYMBOL
        {
            get
            {
                return _SYMBOL;
            }
            set
            {
                if (_SYMBOL != value)
                {
                    OnSYMBOLChanging(value);
                    ReportPropertyChanging("SYMBOL");
                    _SYMBOL = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("SYMBOL");
                    OnSYMBOLChanged();
                }
            }
        }
        private global::System.String _SYMBOL;
        partial void OnSYMBOLChanging(global::System.String value);
        partial void OnSYMBOLChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime PRODUCTIONDATE
        {
            get
            {
                return _PRODUCTIONDATE;
            }
            set
            {
                OnPRODUCTIONDATEChanging(value);
                ReportPropertyChanging("PRODUCTIONDATE");
                _PRODUCTIONDATE = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PRODUCTIONDATE");
                OnPRODUCTIONDATEChanged();
            }
        }
        private global::System.DateTime _PRODUCTIONDATE;
        partial void OnPRODUCTIONDATEChanging(global::System.DateTime value);
        partial void OnPRODUCTIONDATEChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String MODELNAME
        {
            get
            {
                return _MODELNAME;
            }
            set
            {
                OnMODELNAMEChanging(value);
                ReportPropertyChanging("MODELNAME");
                _MODELNAME = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("MODELNAME");
                OnMODELNAMEChanged();
            }
        }
        private global::System.String _MODELNAME;
        partial void OnMODELNAMEChanging(global::System.String value);
        partial void OnMODELNAMEChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CARRIERSYMBOL
        {
            get
            {
                return _CARRIERSYMBOL;
            }
            set
            {
                OnCARRIERSYMBOLChanging(value);
                ReportPropertyChanging("CARRIERSYMBOL");
                _CARRIERSYMBOL = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("CARRIERSYMBOL");
                OnCARRIERSYMBOLChanged();
            }
        }
        private global::System.String _CARRIERSYMBOL;
        partial void OnCARRIERSYMBOLChanging(global::System.String value);
        partial void OnCARRIERSYMBOLChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "AIRPLANE_AIRPLANEMODEL", "AIRPLANEMODEL")]
        public AIRPLANEMODEL AIRPLANEMODEL
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AIRPLANEMODEL>("Model.AIRPLANE_AIRPLANEMODEL", "AIRPLANEMODEL").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AIRPLANEMODEL>("Model.AIRPLANE_AIRPLANEMODEL", "AIRPLANEMODEL").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<AIRPLANEMODEL> AIRPLANEMODELReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AIRPLANEMODEL>("Model.AIRPLANE_AIRPLANEMODEL", "AIRPLANEMODEL");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<AIRPLANEMODEL>("Model.AIRPLANE_AIRPLANEMODEL", "AIRPLANEMODEL", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "AIRPLANE_CARRIER", "CARRIER")]
        public CARRIER CARRIER
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CARRIER>("Model.AIRPLANE_CARRIER", "CARRIER").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CARRIER>("Model.AIRPLANE_CARRIER", "CARRIER").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CARRIER> CARRIERReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CARRIER>("Model.AIRPLANE_CARRIER", "CARRIER");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CARRIER>("Model.AIRPLANE_CARRIER", "CARRIER", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "FLY_AIRPLANE", "FLY")]
        public EntityCollection<FLY> FLY
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<FLY>("Model.FLY_AIRPLANE", "FLY");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<FLY>("Model.FLY_AIRPLANE", "FLY", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="AIRPLANEMODEL")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class AIRPLANEMODEL : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new AIRPLANEMODEL object.
        /// </summary>
        /// <param name="nAME">Initial value of the NAME property.</param>
        /// <param name="pRODUCERNAME">Initial value of the PRODUCERNAME property.</param>
        public static AIRPLANEMODEL CreateAIRPLANEMODEL(global::System.String nAME, global::System.String pRODUCERNAME)
        {
            AIRPLANEMODEL aIRPLANEMODEL = new AIRPLANEMODEL();
            aIRPLANEMODEL.NAME = nAME;
            aIRPLANEMODEL.PRODUCERNAME = pRODUCERNAME;
            return aIRPLANEMODEL;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String NAME
        {
            get
            {
                return _NAME;
            }
            set
            {
                if (_NAME != value)
                {
                    OnNAMEChanging(value);
                    ReportPropertyChanging("NAME");
                    _NAME = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("NAME");
                    OnNAMEChanged();
                }
            }
        }
        private global::System.String _NAME;
        partial void OnNAMEChanging(global::System.String value);
        partial void OnNAMEChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String PRODUCERNAME
        {
            get
            {
                return _PRODUCERNAME;
            }
            set
            {
                OnPRODUCERNAMEChanging(value);
                ReportPropertyChanging("PRODUCERNAME");
                _PRODUCERNAME = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("PRODUCERNAME");
                OnPRODUCERNAMEChanged();
            }
        }
        private global::System.String _PRODUCERNAME;
        partial void OnPRODUCERNAMEChanging(global::System.String value);
        partial void OnPRODUCERNAMEChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "AIRPLANE_AIRPLANEMODEL", "AIRPLANE")]
        public EntityCollection<AIRPLANE> AIRPLANE
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<AIRPLANE>("Model.AIRPLANE_AIRPLANEMODEL", "AIRPLANE");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<AIRPLANE>("Model.AIRPLANE_AIRPLANEMODEL", "AIRPLANE", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "AIRPLANEMODEL_PRODUCER", "PRODUCER")]
        public PRODUCER PRODUCER
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PRODUCER>("Model.AIRPLANEMODEL_PRODUCER", "PRODUCER").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PRODUCER>("Model.AIRPLANEMODEL_PRODUCER", "PRODUCER").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<PRODUCER> PRODUCERReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PRODUCER>("Model.AIRPLANEMODEL_PRODUCER", "PRODUCER");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<PRODUCER>("Model.AIRPLANEMODEL_PRODUCER", "PRODUCER", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "CONNECTION_AIRPLANEMODEL", "CONNECTION")]
        public EntityCollection<CONNECTION> CONNECTION
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CONNECTION>("Model.CONNECTION_AIRPLANEMODEL", "CONNECTION");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CONNECTION>("Model.CONNECTION_AIRPLANEMODEL", "CONNECTION", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="AIRPORT")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class AIRPORT : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new AIRPORT object.
        /// </summary>
        /// <param name="sYMBOL">Initial value of the SYMBOL property.</param>
        /// <param name="cITYNAME">Initial value of the CITYNAME property.</param>
        public static AIRPORT CreateAIRPORT(global::System.String sYMBOL, global::System.String cITYNAME)
        {
            AIRPORT aIRPORT = new AIRPORT();
            aIRPORT.SYMBOL = sYMBOL;
            aIRPORT.CITYNAME = cITYNAME;
            return aIRPORT;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SYMBOL
        {
            get
            {
                return _SYMBOL;
            }
            set
            {
                if (_SYMBOL != value)
                {
                    OnSYMBOLChanging(value);
                    ReportPropertyChanging("SYMBOL");
                    _SYMBOL = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("SYMBOL");
                    OnSYMBOLChanged();
                }
            }
        }
        private global::System.String _SYMBOL;
        partial void OnSYMBOLChanging(global::System.String value);
        partial void OnSYMBOLChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CITYNAME
        {
            get
            {
                return _CITYNAME;
            }
            set
            {
                OnCITYNAMEChanging(value);
                ReportPropertyChanging("CITYNAME");
                _CITYNAME = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("CITYNAME");
                OnCITYNAMEChanged();
            }
        }
        private global::System.String _CITYNAME;
        partial void OnCITYNAMEChanging(global::System.String value);
        partial void OnCITYNAMEChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "AIRPORT_CITY", "CITY")]
        public CITY CITY
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CITY>("Model.AIRPORT_CITY", "CITY").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CITY>("Model.AIRPORT_CITY", "CITY").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CITY> CITYReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CITY>("Model.AIRPORT_CITY", "CITY");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CITY>("Model.AIRPORT_CITY", "CITY", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "CONNECTION_AIRPORT_FROM", "CONNECTION")]
        public EntityCollection<CONNECTION> CONNECTION
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CONNECTION>("Model.CONNECTION_AIRPORT_FROM", "CONNECTION");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CONNECTION>("Model.CONNECTION_AIRPORT_FROM", "CONNECTION", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "CONNECTION_AIRPORT_TO", "CONNECTION")]
        public EntityCollection<CONNECTION> CONNECTION1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CONNECTION>("Model.CONNECTION_AIRPORT_TO", "CONNECTION");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CONNECTION>("Model.CONNECTION_AIRPORT_TO", "CONNECTION", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="CARRIER")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CARRIER : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CARRIER object.
        /// </summary>
        /// <param name="sYMBOL">Initial value of the SYMBOL property.</param>
        /// <param name="nAME">Initial value of the NAME property.</param>
        public static CARRIER CreateCARRIER(global::System.String sYMBOL, global::System.String nAME)
        {
            CARRIER cARRIER = new CARRIER();
            cARRIER.SYMBOL = sYMBOL;
            cARRIER.NAME = nAME;
            return cARRIER;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SYMBOL
        {
            get
            {
                return _SYMBOL;
            }
            set
            {
                if (_SYMBOL != value)
                {
                    OnSYMBOLChanging(value);
                    ReportPropertyChanging("SYMBOL");
                    _SYMBOL = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("SYMBOL");
                    OnSYMBOLChanged();
                }
            }
        }
        private global::System.String _SYMBOL;
        partial void OnSYMBOLChanging(global::System.String value);
        partial void OnSYMBOLChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String NAME
        {
            get
            {
                return _NAME;
            }
            set
            {
                OnNAMEChanging(value);
                ReportPropertyChanging("NAME");
                _NAME = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("NAME");
                OnNAMEChanged();
            }
        }
        private global::System.String _NAME;
        partial void OnNAMEChanging(global::System.String value);
        partial void OnNAMEChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> RATE
        {
            get
            {
                return _RATE;
            }
            set
            {
                OnRATEChanging(value);
                ReportPropertyChanging("RATE");
                _RATE = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RATE");
                OnRATEChanged();
            }
        }
        private Nullable<global::System.Decimal> _RATE;
        partial void OnRATEChanging(Nullable<global::System.Decimal> value);
        partial void OnRATEChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "AIRPLANE_CARRIER", "AIRPLANE")]
        public EntityCollection<AIRPLANE> AIRPLANE
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<AIRPLANE>("Model.AIRPLANE_CARRIER", "AIRPLANE");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<AIRPLANE>("Model.AIRPLANE_CARRIER", "AIRPLANE", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "CONNECTION_CARRIER", "CONNECTION")]
        public EntityCollection<CONNECTION> CONNECTION
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CONNECTION>("Model.CONNECTION_CARRIER", "CONNECTION");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CONNECTION>("Model.CONNECTION_CARRIER", "CONNECTION", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="CITY")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CITY : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CITY object.
        /// </summary>
        /// <param name="nAME">Initial value of the NAME property.</param>
        /// <param name="cOUNTRYNAME">Initial value of the COUNTRYNAME property.</param>
        public static CITY CreateCITY(global::System.String nAME, global::System.String cOUNTRYNAME)
        {
            CITY cITY = new CITY();
            cITY.NAME = nAME;
            cITY.COUNTRYNAME = cOUNTRYNAME;
            return cITY;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String NAME
        {
            get
            {
                return _NAME;
            }
            set
            {
                if (_NAME != value)
                {
                    OnNAMEChanging(value);
                    ReportPropertyChanging("NAME");
                    _NAME = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("NAME");
                    OnNAMEChanged();
                }
            }
        }
        private global::System.String _NAME;
        partial void OnNAMEChanging(global::System.String value);
        partial void OnNAMEChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String COUNTRYNAME
        {
            get
            {
                return _COUNTRYNAME;
            }
            set
            {
                OnCOUNTRYNAMEChanging(value);
                ReportPropertyChanging("COUNTRYNAME");
                _COUNTRYNAME = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("COUNTRYNAME");
                OnCOUNTRYNAMEChanged();
            }
        }
        private global::System.String _COUNTRYNAME;
        partial void OnCOUNTRYNAMEChanging(global::System.String value);
        partial void OnCOUNTRYNAMEChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "AIRPORT_CITY", "AIRPORT")]
        public EntityCollection<AIRPORT> AIRPORT
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<AIRPORT>("Model.AIRPORT_CITY", "AIRPORT");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<AIRPORT>("Model.AIRPORT_CITY", "AIRPORT", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "CITY_COUNTRY", "COUNTRY")]
        public COUNTRY COUNTRY
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<COUNTRY>("Model.CITY_COUNTRY", "COUNTRY").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<COUNTRY>("Model.CITY_COUNTRY", "COUNTRY").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<COUNTRY> COUNTRYReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<COUNTRY>("Model.CITY_COUNTRY", "COUNTRY");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<COUNTRY>("Model.CITY_COUNTRY", "COUNTRY", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="CONNECTION")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CONNECTION : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CONNECTION object.
        /// </summary>
        /// <param name="sYMBOL">Initial value of the SYMBOL property.</param>
        /// <param name="dEPARTURETIME">Initial value of the DEPARTURETIME property.</param>
        /// <param name="aRIVALTIME">Initial value of the ARIVALTIME property.</param>
        /// <param name="wEEKDAY">Initial value of the WEEKDAY property.</param>
        /// <param name="pRICE">Initial value of the PRICE property.</param>
        /// <param name="tICKETS">Initial value of the TICKETS property.</param>
        /// <param name="cARRIERSYMBOL">Initial value of the CARRIERSYMBOL property.</param>
        /// <param name="aIRPLANEMODELNAME">Initial value of the AIRPLANEMODELNAME property.</param>
        /// <param name="fROMAIRPORTSYMBOL">Initial value of the FROMAIRPORTSYMBOL property.</param>
        /// <param name="tOAIRPORTSYMBOL">Initial value of the TOAIRPORTSYMBOL property.</param>
        public static CONNECTION CreateCONNECTION(global::System.String sYMBOL, global::System.DateTime dEPARTURETIME, global::System.DateTime aRIVALTIME, global::System.String wEEKDAY, global::System.Decimal pRICE, global::System.Decimal tICKETS, global::System.String cARRIERSYMBOL, global::System.String aIRPLANEMODELNAME, global::System.String fROMAIRPORTSYMBOL, global::System.String tOAIRPORTSYMBOL)
        {
            CONNECTION cONNECTION = new CONNECTION();
            cONNECTION.SYMBOL = sYMBOL;
            cONNECTION.DEPARTURETIME = dEPARTURETIME;
            cONNECTION.ARIVALTIME = aRIVALTIME;
            cONNECTION.WEEKDAY = wEEKDAY;
            cONNECTION.PRICE = pRICE;
            cONNECTION.TICKETS = tICKETS;
            cONNECTION.CARRIERSYMBOL = cARRIERSYMBOL;
            cONNECTION.AIRPLANEMODELNAME = aIRPLANEMODELNAME;
            cONNECTION.FROMAIRPORTSYMBOL = fROMAIRPORTSYMBOL;
            cONNECTION.TOAIRPORTSYMBOL = tOAIRPORTSYMBOL;
            return cONNECTION;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SYMBOL
        {
            get
            {
                return _SYMBOL;
            }
            set
            {
                if (_SYMBOL != value)
                {
                    OnSYMBOLChanging(value);
                    ReportPropertyChanging("SYMBOL");
                    _SYMBOL = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("SYMBOL");
                    OnSYMBOLChanged();
                }
            }
        }
        private global::System.String _SYMBOL;
        partial void OnSYMBOLChanging(global::System.String value);
        partial void OnSYMBOLChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DEPARTURETIME
        {
            get
            {
                return _DEPARTURETIME;
            }
            set
            {
                OnDEPARTURETIMEChanging(value);
                ReportPropertyChanging("DEPARTURETIME");
                _DEPARTURETIME = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DEPARTURETIME");
                OnDEPARTURETIMEChanged();
            }
        }
        private global::System.DateTime _DEPARTURETIME;
        partial void OnDEPARTURETIMEChanging(global::System.DateTime value);
        partial void OnDEPARTURETIMEChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime ARIVALTIME
        {
            get
            {
                return _ARIVALTIME;
            }
            set
            {
                OnARIVALTIMEChanging(value);
                ReportPropertyChanging("ARIVALTIME");
                _ARIVALTIME = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ARIVALTIME");
                OnARIVALTIMEChanged();
            }
        }
        private global::System.DateTime _ARIVALTIME;
        partial void OnARIVALTIMEChanging(global::System.DateTime value);
        partial void OnARIVALTIMEChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String WEEKDAY
        {
            get
            {
                return _WEEKDAY;
            }
            set
            {
                OnWEEKDAYChanging(value);
                ReportPropertyChanging("WEEKDAY");
                _WEEKDAY = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("WEEKDAY");
                OnWEEKDAYChanged();
            }
        }
        private global::System.String _WEEKDAY;
        partial void OnWEEKDAYChanging(global::System.String value);
        partial void OnWEEKDAYChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal PRICE
        {
            get
            {
                return _PRICE;
            }
            set
            {
                OnPRICEChanging(value);
                ReportPropertyChanging("PRICE");
                _PRICE = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PRICE");
                OnPRICEChanged();
            }
        }
        private global::System.Decimal _PRICE;
        partial void OnPRICEChanging(global::System.Decimal value);
        partial void OnPRICEChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal TICKETS
        {
            get
            {
                return _TICKETS;
            }
            set
            {
                OnTICKETSChanging(value);
                ReportPropertyChanging("TICKETS");
                _TICKETS = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TICKETS");
                OnTICKETSChanged();
            }
        }
        private global::System.Decimal _TICKETS;
        partial void OnTICKETSChanging(global::System.Decimal value);
        partial void OnTICKETSChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CARRIERSYMBOL
        {
            get
            {
                return _CARRIERSYMBOL;
            }
            set
            {
                OnCARRIERSYMBOLChanging(value);
                ReportPropertyChanging("CARRIERSYMBOL");
                _CARRIERSYMBOL = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("CARRIERSYMBOL");
                OnCARRIERSYMBOLChanged();
            }
        }
        private global::System.String _CARRIERSYMBOL;
        partial void OnCARRIERSYMBOLChanging(global::System.String value);
        partial void OnCARRIERSYMBOLChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String AIRPLANEMODELNAME
        {
            get
            {
                return _AIRPLANEMODELNAME;
            }
            set
            {
                OnAIRPLANEMODELNAMEChanging(value);
                ReportPropertyChanging("AIRPLANEMODELNAME");
                _AIRPLANEMODELNAME = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("AIRPLANEMODELNAME");
                OnAIRPLANEMODELNAMEChanged();
            }
        }
        private global::System.String _AIRPLANEMODELNAME;
        partial void OnAIRPLANEMODELNAMEChanging(global::System.String value);
        partial void OnAIRPLANEMODELNAMEChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FROMAIRPORTSYMBOL
        {
            get
            {
                return _FROMAIRPORTSYMBOL;
            }
            set
            {
                OnFROMAIRPORTSYMBOLChanging(value);
                ReportPropertyChanging("FROMAIRPORTSYMBOL");
                _FROMAIRPORTSYMBOL = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FROMAIRPORTSYMBOL");
                OnFROMAIRPORTSYMBOLChanged();
            }
        }
        private global::System.String _FROMAIRPORTSYMBOL;
        partial void OnFROMAIRPORTSYMBOLChanging(global::System.String value);
        partial void OnFROMAIRPORTSYMBOLChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TOAIRPORTSYMBOL
        {
            get
            {
                return _TOAIRPORTSYMBOL;
            }
            set
            {
                OnTOAIRPORTSYMBOLChanging(value);
                ReportPropertyChanging("TOAIRPORTSYMBOL");
                _TOAIRPORTSYMBOL = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TOAIRPORTSYMBOL");
                OnTOAIRPORTSYMBOLChanged();
            }
        }
        private global::System.String _TOAIRPORTSYMBOL;
        partial void OnTOAIRPORTSYMBOLChanging(global::System.String value);
        partial void OnTOAIRPORTSYMBOLChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "CONNECTION_AIRPLANEMODEL", "AIRPLANEMODEL")]
        public AIRPLANEMODEL AIRPLANEMODEL
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AIRPLANEMODEL>("Model.CONNECTION_AIRPLANEMODEL", "AIRPLANEMODEL").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AIRPLANEMODEL>("Model.CONNECTION_AIRPLANEMODEL", "AIRPLANEMODEL").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<AIRPLANEMODEL> AIRPLANEMODELReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AIRPLANEMODEL>("Model.CONNECTION_AIRPLANEMODEL", "AIRPLANEMODEL");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<AIRPLANEMODEL>("Model.CONNECTION_AIRPLANEMODEL", "AIRPLANEMODEL", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "CONNECTION_AIRPORT_FROM", "AIRPORT")]
        public AIRPORT AIRPORT
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AIRPORT>("Model.CONNECTION_AIRPORT_FROM", "AIRPORT").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AIRPORT>("Model.CONNECTION_AIRPORT_FROM", "AIRPORT").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<AIRPORT> AIRPORTReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AIRPORT>("Model.CONNECTION_AIRPORT_FROM", "AIRPORT");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<AIRPORT>("Model.CONNECTION_AIRPORT_FROM", "AIRPORT", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "CONNECTION_AIRPORT_TO", "AIRPORT")]
        public AIRPORT AIRPORT1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AIRPORT>("Model.CONNECTION_AIRPORT_TO", "AIRPORT").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AIRPORT>("Model.CONNECTION_AIRPORT_TO", "AIRPORT").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<AIRPORT> AIRPORT1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AIRPORT>("Model.CONNECTION_AIRPORT_TO", "AIRPORT");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<AIRPORT>("Model.CONNECTION_AIRPORT_TO", "AIRPORT", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "CONNECTION_CARRIER", "CARRIER")]
        public CARRIER CARRIER
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CARRIER>("Model.CONNECTION_CARRIER", "CARRIER").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CARRIER>("Model.CONNECTION_CARRIER", "CARRIER").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CARRIER> CARRIERReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CARRIER>("Model.CONNECTION_CARRIER", "CARRIER");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CARRIER>("Model.CONNECTION_CARRIER", "CARRIER", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "FLY_CONNECTION", "FLY")]
        public EntityCollection<FLY> FLY
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<FLY>("Model.FLY_CONNECTION", "FLY");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<FLY>("Model.FLY_CONNECTION", "FLY", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="COUNTRY")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class COUNTRY : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new COUNTRY object.
        /// </summary>
        /// <param name="nAME">Initial value of the NAME property.</param>
        public static COUNTRY CreateCOUNTRY(global::System.String nAME)
        {
            COUNTRY cOUNTRY = new COUNTRY();
            cOUNTRY.NAME = nAME;
            return cOUNTRY;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String NAME
        {
            get
            {
                return _NAME;
            }
            set
            {
                if (_NAME != value)
                {
                    OnNAMEChanging(value);
                    ReportPropertyChanging("NAME");
                    _NAME = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("NAME");
                    OnNAMEChanged();
                }
            }
        }
        private global::System.String _NAME;
        partial void OnNAMEChanging(global::System.String value);
        partial void OnNAMEChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "CITY_COUNTRY", "CITY")]
        public EntityCollection<CITY> CITY
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CITY>("Model.CITY_COUNTRY", "CITY");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CITY>("Model.CITY_COUNTRY", "CITY", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="FLY")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class FLY : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new FLY object.
        /// </summary>
        /// <param name="sYMBOL">Initial value of the SYMBOL property.</param>
        /// <param name="fLYDATE">Initial value of the FLYDATE property.</param>
        /// <param name="aIRPLANESYMBOL">Initial value of the AIRPLANESYMBOL property.</param>
        /// <param name="cONNECTIONSYMBOL">Initial value of the CONNECTIONSYMBOL property.</param>
        /// <param name="fREEPLACESNUMBER">Initial value of the FREEPLACESNUMBER property.</param>
        public static FLY CreateFLY(global::System.String sYMBOL, global::System.DateTime fLYDATE, global::System.String aIRPLANESYMBOL, global::System.String cONNECTIONSYMBOL, global::System.Decimal fREEPLACESNUMBER)
        {
            FLY fLY = new FLY();
            fLY.SYMBOL = sYMBOL;
            fLY.FLYDATE = fLYDATE;
            fLY.AIRPLANESYMBOL = aIRPLANESYMBOL;
            fLY.CONNECTIONSYMBOL = cONNECTIONSYMBOL;
            fLY.FREEPLACESNUMBER = fREEPLACESNUMBER;
            return fLY;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SYMBOL
        {
            get
            {
                return _SYMBOL;
            }
            set
            {
                if (_SYMBOL != value)
                {
                    OnSYMBOLChanging(value);
                    ReportPropertyChanging("SYMBOL");
                    _SYMBOL = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("SYMBOL");
                    OnSYMBOLChanged();
                }
            }
        }
        private global::System.String _SYMBOL;
        partial void OnSYMBOLChanging(global::System.String value);
        partial void OnSYMBOLChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime FLYDATE
        {
            get
            {
                return _FLYDATE;
            }
            set
            {
                OnFLYDATEChanging(value);
                ReportPropertyChanging("FLYDATE");
                _FLYDATE = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FLYDATE");
                OnFLYDATEChanged();
            }
        }
        private global::System.DateTime _FLYDATE;
        partial void OnFLYDATEChanging(global::System.DateTime value);
        partial void OnFLYDATEChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String AIRPLANESYMBOL
        {
            get
            {
                return _AIRPLANESYMBOL;
            }
            set
            {
                OnAIRPLANESYMBOLChanging(value);
                ReportPropertyChanging("AIRPLANESYMBOL");
                _AIRPLANESYMBOL = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("AIRPLANESYMBOL");
                OnAIRPLANESYMBOLChanged();
            }
        }
        private global::System.String _AIRPLANESYMBOL;
        partial void OnAIRPLANESYMBOLChanging(global::System.String value);
        partial void OnAIRPLANESYMBOLChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CONNECTIONSYMBOL
        {
            get
            {
                return _CONNECTIONSYMBOL;
            }
            set
            {
                OnCONNECTIONSYMBOLChanging(value);
                ReportPropertyChanging("CONNECTIONSYMBOL");
                _CONNECTIONSYMBOL = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("CONNECTIONSYMBOL");
                OnCONNECTIONSYMBOLChanged();
            }
        }
        private global::System.String _CONNECTIONSYMBOL;
        partial void OnCONNECTIONSYMBOLChanging(global::System.String value);
        partial void OnCONNECTIONSYMBOLChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal FREEPLACESNUMBER
        {
            get
            {
                return _FREEPLACESNUMBER;
            }
            set
            {
                OnFREEPLACESNUMBERChanging(value);
                ReportPropertyChanging("FREEPLACESNUMBER");
                _FREEPLACESNUMBER = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FREEPLACESNUMBER");
                OnFREEPLACESNUMBERChanged();
            }
        }
        private global::System.Decimal _FREEPLACESNUMBER;
        partial void OnFREEPLACESNUMBERChanging(global::System.Decimal value);
        partial void OnFREEPLACESNUMBERChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "FLY_AIRPLANE", "AIRPLANE")]
        public AIRPLANE AIRPLANE
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AIRPLANE>("Model.FLY_AIRPLANE", "AIRPLANE").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AIRPLANE>("Model.FLY_AIRPLANE", "AIRPLANE").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<AIRPLANE> AIRPLANEReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AIRPLANE>("Model.FLY_AIRPLANE", "AIRPLANE");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<AIRPLANE>("Model.FLY_AIRPLANE", "AIRPLANE", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "FLY_CONNECTION", "CONNECTION")]
        public CONNECTION CONNECTION
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CONNECTION>("Model.FLY_CONNECTION", "CONNECTION").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CONNECTION>("Model.FLY_CONNECTION", "CONNECTION").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CONNECTION> CONNECTIONReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CONNECTION>("Model.FLY_CONNECTION", "CONNECTION");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CONNECTION>("Model.FLY_CONNECTION", "CONNECTION", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "RESERVATION_FLY", "RESERVATION")]
        public EntityCollection<RESERVATION> RESERVATION
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RESERVATION>("Model.RESERVATION_FLY", "RESERVATION");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RESERVATION>("Model.RESERVATION_FLY", "RESERVATION", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="PRODUCER")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PRODUCER : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new PRODUCER object.
        /// </summary>
        /// <param name="nAME">Initial value of the NAME property.</param>
        public static PRODUCER CreatePRODUCER(global::System.String nAME)
        {
            PRODUCER pRODUCER = new PRODUCER();
            pRODUCER.NAME = nAME;
            return pRODUCER;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String NAME
        {
            get
            {
                return _NAME;
            }
            set
            {
                if (_NAME != value)
                {
                    OnNAMEChanging(value);
                    ReportPropertyChanging("NAME");
                    _NAME = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("NAME");
                    OnNAMEChanged();
                }
            }
        }
        private global::System.String _NAME;
        partial void OnNAMEChanging(global::System.String value);
        partial void OnNAMEChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "AIRPLANEMODEL_PRODUCER", "AIRPLANEMODEL")]
        public EntityCollection<AIRPLANEMODEL> AIRPLANEMODEL
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<AIRPLANEMODEL>("Model.AIRPLANEMODEL_PRODUCER", "AIRPLANEMODEL");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<AIRPLANEMODEL>("Model.AIRPLANEMODEL_PRODUCER", "AIRPLANEMODEL", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="RESERVATION")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RESERVATION : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RESERVATION object.
        /// </summary>
        /// <param name="sYMBOL">Initial value of the SYMBOL property.</param>
        /// <param name="fLYSYMBOL">Initial value of the FLYSYMBOL property.</param>
        public static RESERVATION CreateRESERVATION(global::System.String sYMBOL, global::System.String fLYSYMBOL)
        {
            RESERVATION rESERVATION = new RESERVATION();
            rESERVATION.SYMBOL = sYMBOL;
            rESERVATION.FLYSYMBOL = fLYSYMBOL;
            return rESERVATION;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SYMBOL
        {
            get
            {
                return _SYMBOL;
            }
            set
            {
                if (_SYMBOL != value)
                {
                    OnSYMBOLChanging(value);
                    ReportPropertyChanging("SYMBOL");
                    _SYMBOL = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("SYMBOL");
                    OnSYMBOLChanged();
                }
            }
        }
        private global::System.String _SYMBOL;
        partial void OnSYMBOLChanging(global::System.String value);
        partial void OnSYMBOLChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PLACENUMBER
        {
            get
            {
                return _PLACENUMBER;
            }
            set
            {
                OnPLACENUMBERChanging(value);
                ReportPropertyChanging("PLACENUMBER");
                _PLACENUMBER = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PLACENUMBER");
                OnPLACENUMBERChanged();
            }
        }
        private global::System.String _PLACENUMBER;
        partial void OnPLACENUMBERChanging(global::System.String value);
        partial void OnPLACENUMBERChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int16> ISPAID
        {
            get
            {
                return _ISPAID;
            }
            set
            {
                OnISPAIDChanging(value);
                ReportPropertyChanging("ISPAID");
                _ISPAID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ISPAID");
                OnISPAIDChanged();
            }
        }
        private Nullable<global::System.Int16> _ISPAID;
        partial void OnISPAIDChanging(Nullable<global::System.Int16> value);
        partial void OnISPAIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FLYSYMBOL
        {
            get
            {
                return _FLYSYMBOL;
            }
            set
            {
                OnFLYSYMBOLChanging(value);
                ReportPropertyChanging("FLYSYMBOL");
                _FLYSYMBOL = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FLYSYMBOL");
                OnFLYSYMBOLChanged();
            }
        }
        private global::System.String _FLYSYMBOL;
        partial void OnFLYSYMBOLChanging(global::System.String value);
        partial void OnFLYSYMBOLChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> CLIENTID
        {
            get
            {
                return _CLIENTID;
            }
            set
            {
                OnCLIENTIDChanging(value);
                ReportPropertyChanging("CLIENTID");
                _CLIENTID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CLIENTID");
                OnCLIENTIDChanged();
            }
        }
        private Nullable<global::System.Decimal> _CLIENTID;
        partial void OnCLIENTIDChanging(Nullable<global::System.Decimal> value);
        partial void OnCLIENTIDChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "RESERVATION_FLY", "FLY")]
        public FLY FLY
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FLY>("Model.RESERVATION_FLY", "FLY").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FLY>("Model.RESERVATION_FLY", "FLY").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<FLY> FLYReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FLY>("Model.RESERVATION_FLY", "FLY");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<FLY>("Model.RESERVATION_FLY", "FLY", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
